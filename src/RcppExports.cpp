// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// getNberCriteria_Rcpp
int getNberCriteria_Rcpp();
RcppExport SEXP ClustMMDD_getNberCriteria_Rcpp() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(getNberCriteria_Rcpp());
    return __result;
END_RCPP
}
// getCriteriaNames_Rcpp
Rcpp::CharacterVector getCriteriaNames_Rcpp();
RcppExport SEXP ClustMMDD_getCriteriaNames_Rcpp() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(getCriteriaNames_Rcpp());
    return __result;
END_RCPP
}
// getNberOccurrencesMax
int getNberOccurrencesMax();
RcppExport SEXP ClustMMDD_getNberOccurrencesMax() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(getNberOccurrencesMax());
    return __result;
END_RCPP
}
// simulProb
Rcpp::DoubleVector simulProb(int n);
RcppExport SEXP ClustMMDD_simulProb(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(simulProb(n));
    return __result;
END_RCPP
}
// testFactorial
void testFactorial();
RcppExport SEXP ClustMMDD_testFactorial() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    testFactorial();
    return R_NilValue;
END_RCPP
}
// cutInN
Rcpp::CharacterMatrix cutInN(Rcpp::CharacterVector x, int N);
RcppExport SEXP ClustMMDD_cutInN(SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    __result = Rcpp::wrap(cutInN(x, N));
    return __result;
END_RCPP
}
// cutEachColInN
Rcpp::CharacterMatrix cutEachColInN(Rcpp::CharacterMatrix tab, int N);
RcppExport SEXP ClustMMDD_cutEachColInN(SEXP tabSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::CharacterMatrix >::type tab(tabSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    __result = Rcpp::wrap(cutEachColInN(tab, N));
    return __result;
END_RCPP
}
// howmanyWords
int howmanyWords(std::string line);
RcppExport SEXP ClustMMDD_howmanyWords(SEXP lineSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type line(lineSEXP);
    __result = Rcpp::wrap(howmanyWords(line));
    return __result;
END_RCPP
}
// isComment
bool isComment(std::string ligne);
RcppExport SEXP ClustMMDD_isComment(SEXP ligneSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type ligne(ligneSEXP);
    __result = Rcpp::wrap(isComment(ligne));
    return __result;
END_RCPP
}
// nberOfLines
int nberOfLines(std::string fichier);
RcppExport SEXP ClustMMDD_nberOfLines(SEXP fichierSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type fichier(fichierSEXP);
    __result = Rcpp::wrap(nberOfLines(fichier));
    return __result;
END_RCPP
}
// nberOfColumns
int nberOfColumns(std::string fichier);
RcppExport SEXP ClustMMDD_nberOfColumns(SEXP fichierSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type fichier(fichierSEXP);
    __result = Rcpp::wrap(nberOfColumns(fichier));
    return __result;
END_RCPP
}
// readLineN_R
std::string readLineN_R(std::string fichier, int n);
RcppExport SEXP ClustMMDD_readLineN_R(SEXP fichierSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type fichier(fichierSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(readLineN_R(fichier, n));
    return __result;
END_RCPP
}
// initialiseEmSettings
void initialiseEmSettings();
RcppExport SEXP ClustMMDD_initialiseEmSettings() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    initialiseEmSettings();
    return R_NilValue;
END_RCPP
}
// EmOptionsDefault
void EmOptionsDefault();
RcppExport SEXP ClustMMDD_EmOptionsDefault() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    EmOptionsDefault();
    return R_NilValue;
END_RCPP
}
// EmSettings
void EmSettings(double xepsi, int xnberSmallEM, int xnberIterations, int xtypeEM, int xtypeSmallEM, int xnberIterLongEM, bool xputThreshold);
RcppExport SEXP ClustMMDD_EmSettings(SEXP xepsiSEXP, SEXP xnberSmallEMSEXP, SEXP xnberIterationsSEXP, SEXP xtypeEMSEXP, SEXP xtypeSmallEMSEXP, SEXP xnberIterLongEMSEXP, SEXP xputThresholdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type xepsi(xepsiSEXP);
    Rcpp::traits::input_parameter< int >::type xnberSmallEM(xnberSmallEMSEXP);
    Rcpp::traits::input_parameter< int >::type xnberIterations(xnberIterationsSEXP);
    Rcpp::traits::input_parameter< int >::type xtypeEM(xtypeEMSEXP);
    Rcpp::traits::input_parameter< int >::type xtypeSmallEM(xtypeSmallEMSEXP);
    Rcpp::traits::input_parameter< int >::type xnberIterLongEM(xnberIterLongEMSEXP);
    Rcpp::traits::input_parameter< bool >::type xputThreshold(xputThresholdSEXP);
    EmSettings(xepsi, xnberSmallEM, xnberIterations, xtypeEM, xtypeSmallEM, xnberIterLongEM, xputThreshold);
    return R_NilValue;
END_RCPP
}
// EmOptionsDisplay
void EmOptionsDisplay();
RcppExport SEXP ClustMMDD_EmOptionsDisplay() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    EmOptionsDisplay();
    return R_NilValue;
END_RCPP
}
// getEmOptions_Rcpp
Rcpp::List getEmOptions_Rcpp();
RcppExport SEXP ClustMMDD_getEmOptions_Rcpp() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(getEmOptions_Rcpp());
    return __result;
END_RCPP
}
// obsFreq
Rcpp::List obsFreq(Rcpp::IntegerMatrix data, int n_occurrences, Rcpp::CharacterVector levels, Rcpp::IntegerVector n_levels, Rcpp::DoubleVector levels_freq, Rcpp::IntegerVector classif, Rcpp::LogicalVector S);
RcppExport SEXP ClustMMDD_obsFreq(SEXP dataSEXP, SEXP n_occurrencesSEXP, SEXP levelsSEXP, SEXP n_levelsSEXP, SEXP levels_freqSEXP, SEXP classifSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_occurrences(n_occurrencesSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type n_levels(n_levelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type levels_freq(levels_freqSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type classif(classifSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type S(SSEXP);
    __result = Rcpp::wrap(obsFreq(data, n_occurrences, levels, n_levels, levels_freq, classif, S));
    return __result;
END_RCPP
}
// EM1_Rcpp
Rcpp::List EM1_Rcpp(Rcpp::IntegerMatrix tab, int n_occurrences, Rcpp::CharacterVector levels, Rcpp::IntegerVector n_levels, Rcpp::IntegerVector levels_count, Rcpp::DoubleVector levels_freq, double Cte);
RcppExport SEXP ClustMMDD_EM1_Rcpp(SEXP tabSEXP, SEXP n_occurrencesSEXP, SEXP levelsSEXP, SEXP n_levelsSEXP, SEXP levels_countSEXP, SEXP levels_freqSEXP, SEXP CteSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type tab(tabSEXP);
    Rcpp::traits::input_parameter< int >::type n_occurrences(n_occurrencesSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type n_levels(n_levelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type levels_count(levels_countSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type levels_freq(levels_freqSEXP);
    Rcpp::traits::input_parameter< double >::type Cte(CteSEXP);
    __result = Rcpp::wrap(EM1_Rcpp(tab, n_occurrences, levels, n_levels, levels_count, levels_freq, Cte));
    return __result;
END_RCPP
}
// mapClassification_Rcpp
Rcpp::IntegerVector mapClassification_Rcpp(Rcpp::NumericMatrix Tik);
RcppExport SEXP ClustMMDD_mapClassification_Rcpp(SEXP TikSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Tik(TikSEXP);
    __result = Rcpp::wrap(mapClassification_Rcpp(Tik));
    return __result;
END_RCPP
}
// smallEM_Rcpp
Rcpp::List smallEM_Rcpp(Rcpp::IntegerMatrix tab, int n_occurrences, Rcpp::CharacterVector levels, Rcpp::IntegerVector n_levels, Rcpp::IntegerVector levels_count, Rcpp::DoubleVector levels_freq, int K, Rcpp::LogicalVector S);
RcppExport SEXP ClustMMDD_smallEM_Rcpp(SEXP tabSEXP, SEXP n_occurrencesSEXP, SEXP levelsSEXP, SEXP n_levelsSEXP, SEXP levels_countSEXP, SEXP levels_freqSEXP, SEXP KSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type tab(tabSEXP);
    Rcpp::traits::input_parameter< int >::type n_occurrences(n_occurrencesSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type n_levels(n_levelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type levels_count(levels_countSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type levels_freq(levels_freqSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type S(SSEXP);
    __result = Rcpp::wrap(smallEM_Rcpp(tab, n_occurrences, levels, n_levels, levels_count, levels_freq, K, S));
    return __result;
END_RCPP
}
// EM_Rcpp
Rcpp::List EM_Rcpp(Rcpp::IntegerMatrix tab, int n_occurrences, Rcpp::CharacterVector levels, Rcpp::IntegerVector n_levels, Rcpp::IntegerVector levels_count, Rcpp::DoubleVector levels_freq, int K, Rcpp::LogicalVector S, double Cte);
RcppExport SEXP ClustMMDD_EM_Rcpp(SEXP tabSEXP, SEXP n_occurrencesSEXP, SEXP levelsSEXP, SEXP n_levelsSEXP, SEXP levels_countSEXP, SEXP levels_freqSEXP, SEXP KSEXP, SEXP SSEXP, SEXP CteSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type tab(tabSEXP);
    Rcpp::traits::input_parameter< int >::type n_occurrences(n_occurrencesSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type n_levels(n_levelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type levels_count(levels_countSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type levels_freq(levels_freqSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type Cte(CteSEXP);
    __result = Rcpp::wrap(EM_Rcpp(tab, n_occurrences, levels, n_levels, levels_count, levels_freq, K, S, Cte));
    return __result;
END_RCPP
}
// readModelFromString_Rcpp
Rcpp::List readModelFromString_Rcpp(std::string mod);
RcppExport SEXP ClustMMDD_readModelFromString_Rcpp(SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type mod(modSEXP);
    __result = Rcpp::wrap(readModelFromString_Rcpp(mod));
    return __result;
END_RCPP
}
// isInFile_Rcpp
Rcpp::List isInFile_Rcpp(int K, Rcpp::LogicalVector S, std::string fichier, bool header);
RcppExport SEXP ClustMMDD_isInFile_Rcpp(SEXP KSEXP, SEXP SSEXP, SEXP fichierSEXP, SEXP headerSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< std::string >::type fichier(fichierSEXP);
    Rcpp::traits::input_parameter< bool >::type header(headerSEXP);
    __result = Rcpp::wrap(isInFile_Rcpp(K, S, fichier, header));
    return __result;
END_RCPP
}
// computeCriteria_Rcpp
Rcpp::DoubleVector computeCriteria_Rcpp(double lv, int dim, int N, double entropy, double Cte);
RcppExport SEXP ClustMMDD_computeCriteria_Rcpp(SEXP lvSEXP, SEXP dimSEXP, SEXP NSEXP, SEXP entropySEXP, SEXP CteSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type lv(lvSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type entropy(entropySEXP);
    Rcpp::traits::input_parameter< double >::type Cte(CteSEXP);
    __result = Rcpp::wrap(computeCriteria_Rcpp(lv, dim, N, entropy, Cte));
    return __result;
END_RCPP
}
// computeCriteriaFromFile_Rcpp
Rcpp::List computeCriteriaFromFile_Rcpp(std::string xfile, double Cte, bool header, Rcpp::IntegerVector indexes);
RcppExport SEXP ClustMMDD_computeCriteriaFromFile_Rcpp(SEXP xfileSEXP, SEXP CteSEXP, SEXP headerSEXP, SEXP indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type xfile(xfileSEXP);
    Rcpp::traits::input_parameter< double >::type Cte(CteSEXP);
    Rcpp::traits::input_parameter< bool >::type header(headerSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indexes(indexesSEXP);
    __result = Rcpp::wrap(computeCriteriaFromFile_Rcpp(xfile, Cte, header, indexes));
    return __result;
END_RCPP
}
// writeParInFile_Rcpp
void writeParInFile_Rcpp(Rcpp::List x, std::string xfile);
RcppExport SEXP ClustMMDD_writeParInFile_Rcpp(SEXP xSEXP, SEXP xfileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type xfile(xfileSEXP);
    writeParInFile_Rcpp(x, xfile);
    return R_NilValue;
END_RCPP
}
// writeModelInFile_Rcpp
void writeModelInFile_Rcpp(Rcpp::List x, std::string xfile);
RcppExport SEXP ClustMMDD_writeModelInFile_Rcpp(SEXP xSEXP, SEXP xfileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type xfile(xfileSEXP);
    writeModelInFile_Rcpp(x, xfile);
    return R_NilValue;
END_RCPP
}
// writeCriteriaInFile_Rcpp
void writeCriteriaInFile_Rcpp(Rcpp::DoubleVector criteria, std::string xfile);
RcppExport SEXP ClustMMDD_writeCriteriaInFile_Rcpp(SEXP criteriaSEXP, SEXP xfileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type criteria(criteriaSEXP);
    Rcpp::traits::input_parameter< std::string >::type xfile(xfileSEXP);
    writeCriteriaInFile_Rcpp(criteria, xfile);
    return R_NilValue;
END_RCPP
}
// readModelAt_Rcpp
Rcpp::List readModelAt_Rcpp(std::string xfile, int n, bool header);
RcppExport SEXP ClustMMDD_readModelAt_Rcpp(SEXP xfileSEXP, SEXP nSEXP, SEXP headerSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type xfile(xfileSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type header(headerSEXP);
    __result = Rcpp::wrap(readModelAt_Rcpp(xfile, n, header));
    return __result;
END_RCPP
}
// selectDimFromFile_Rcpp
bool selectDimFromFile_Rcpp(std::string xfileExploredModels, Rcpp::DoubleVector constantGrid, Rcpp::DoubleVector vectLogLik, Rcpp::IntegerVector vectDim, bool header);
RcppExport SEXP ClustMMDD_selectDimFromFile_Rcpp(SEXP xfileExploredModelsSEXP, SEXP constantGridSEXP, SEXP vectLogLikSEXP, SEXP vectDimSEXP, SEXP headerSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type xfileExploredModels(xfileExploredModelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type constantGrid(constantGridSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type vectLogLik(vectLogLikSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type vectDim(vectDimSEXP);
    Rcpp::traits::input_parameter< bool >::type header(headerSEXP);
    __result = Rcpp::wrap(selectDimFromFile_Rcpp(xfileExploredModels, constantGrid, vectLogLik, vectDim, header));
    return __result;
END_RCPP
}
// selectDimFromData_Rcpp
bool selectDimFromData_Rcpp(Rcpp::DoubleVector xlogLik, Rcpp::IntegerVector xdim, Rcpp::DoubleVector xconstantGrid, Rcpp::DoubleVector outLogLik, Rcpp::IntegerVector outDim);
RcppExport SEXP ClustMMDD_selectDimFromData_Rcpp(SEXP xlogLikSEXP, SEXP xdimSEXP, SEXP xconstantGridSEXP, SEXP outLogLikSEXP, SEXP outDimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type xlogLik(xlogLikSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type xdim(xdimSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type xconstantGrid(xconstantGridSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type outLogLik(outLogLikSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type outDim(outDimSEXP);
    __result = Rcpp::wrap(selectDimFromData_Rcpp(xlogLik, xdim, xconstantGrid, outLogLik, outDim));
    return __result;
END_RCPP
}
// dimJump_Rcpp
bool dimJump_Rcpp(Rcpp::IntegerVector vectDim, int pas, Rcpp::IntegerVector BeginEnd1, Rcpp::IntegerVector BeginEnd2);
RcppExport SEXP ClustMMDD_dimJump_Rcpp(SEXP vectDimSEXP, SEXP pasSEXP, SEXP BeginEnd1SEXP, SEXP BeginEnd2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type vectDim(vectDimSEXP);
    Rcpp::traits::input_parameter< int >::type pas(pasSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type BeginEnd1(BeginEnd1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type BeginEnd2(BeginEnd2SEXP);
    __result = Rcpp::wrap(dimJump_Rcpp(vectDim, pas, BeginEnd1, BeginEnd2));
    return __result;
END_RCPP
}
// selectModelFromFile_Rcpp
void selectModelFromFile_Rcpp(std::string xfileExploredModels, Rcpp::IntegerVector vectN, Rcpp::IntegerVector vectK, Rcpp::IntegerMatrix matS, Rcpp::DoubleVector vectLogLik, Rcpp::IntegerVector vectDim, Rcpp::DoubleVector vectEntropy, Rcpp::DoubleVector vectCriteria, double cte, bool header, Rcpp::IntegerVector lines);
RcppExport SEXP ClustMMDD_selectModelFromFile_Rcpp(SEXP xfileExploredModelsSEXP, SEXP vectNSEXP, SEXP vectKSEXP, SEXP matSSEXP, SEXP vectLogLikSEXP, SEXP vectDimSEXP, SEXP vectEntropySEXP, SEXP vectCriteriaSEXP, SEXP cteSEXP, SEXP headerSEXP, SEXP linesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type xfileExploredModels(xfileExploredModelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type vectN(vectNSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type vectK(vectKSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type matS(matSSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type vectLogLik(vectLogLikSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type vectDim(vectDimSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type vectEntropy(vectEntropySEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type vectCriteria(vectCriteriaSEXP);
    Rcpp::traits::input_parameter< double >::type cte(cteSEXP);
    Rcpp::traits::input_parameter< bool >::type header(headerSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type lines(linesSEXP);
    selectModelFromFile_Rcpp(xfileExploredModels, vectN, vectK, matS, vectLogLik, vectDim, vectEntropy, vectCriteria, cte, header, lines);
    return R_NilValue;
END_RCPP
}
// selectModelFromData_Rcpp
void selectModelFromData_Rcpp(Rcpp::DoubleVector vectLogLik, Rcpp::IntegerVector vectDim, Rcpp::DoubleVector vectEntropy, int N, double cte, Rcpp::IntegerVector vectIndexes, Rcpp::DoubleVector vectCriteria);
RcppExport SEXP ClustMMDD_selectModelFromData_Rcpp(SEXP vectLogLikSEXP, SEXP vectDimSEXP, SEXP vectEntropySEXP, SEXP NSEXP, SEXP cteSEXP, SEXP vectIndexesSEXP, SEXP vectCriteriaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type vectLogLik(vectLogLikSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type vectDim(vectDimSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type vectEntropy(vectEntropySEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type cte(cteSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type vectIndexes(vectIndexesSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type vectCriteria(vectCriteriaSEXP);
    selectModelFromData_Rcpp(vectLogLik, vectDim, vectEntropy, N, cte, vectIndexes, vectCriteria);
    return R_NilValue;
END_RCPP
}
// readParKS_Rcpp
Rcpp::List readParKS_Rcpp(std::string xfile);
RcppExport SEXP ClustMMDD_readParKS_Rcpp(SEXP xfileSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type xfile(xfileSEXP);
    __result = Rcpp::wrap(readParKS_Rcpp(xfile));
    return __result;
END_RCPP
}
// writeParKS_InFile_Rcpp
void writeParKS_InFile_Rcpp(Rcpp::List modelList, std::string file);
RcppExport SEXP ClustMMDD_writeParKS_InFile_Rcpp(SEXP modelListSEXP, SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::List >::type modelList(modelListSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    writeParKS_InFile_Rcpp(modelList, file);
    return R_NilValue;
END_RCPP
}
